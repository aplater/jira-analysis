#!/usr/bin/env python

import attr
import click
import json
from datetime import datetime

from jira_analysis.analysis.config import get_config as analysis_config
from jira_analysis.analysis.chart.ticket_control import generate_control_chart
from jira_analysis.conversions.analysis import convert_jira_to_analysis
from jira_analysis.file_handlers import json_handler
from jira_analysis.jira.auth import get_config as jira_config
from jira_analysis.jira.issue import parse_json as parse_jira_ticket_from_json
from jira_analysis.jira.network import get_issues, get_project


@click.group()
def cli():
    click.echo("Starting")


@cli.command()
@click.argument("project", type=str)
@click.argument("file_out", type=click.File("w"))
@click.option("credentials", "-c", type=click.File("r"), help="Jira credentials file")
def fetch(project: str, file_out, credentials: str):
    """Fetch tickets from PROJECT and write them as JSON to FILE_OUT.
    """
    click.echo("Loading credentials")
    config = jira_config(credentials)
    click.echo("Downloading Jira tickets")
    tickets = get_issues(config, get_project(config, project.upper()))
    click.echo("Saving Jira tickets")
    json_handler.dump([attr.asdict(ticket) for ticket in tickets], file_out)


@cli.command()
@click.argument("project", type=str)
@click.argument("file_in", type=click.File())
@click.option(
    "date_start",
    "-s",
    type=click.DateTime(),
    help="Analyse tickets closed on or after this date.",
)
@click.option(
    "config", "-c", type=click.File(), help="Config file to use for analysis."
)
def analyse(project, file_in, date_start: datetime, config: str):
    """Analyse pre-fetched tickets from the given file_in.

    PROJECT The Project Key to analyse - this is used to define the ticket status and other rules.

    FILE_IN The file path to load.
    """
    click.echo("Loading config")
    config_file = analysis_config(project, config)
    click.echo("Loading Jira tickets")
    data = json.load(file_in)
    jira_tickets = [parse_jira_ticket_from_json(t) for t in data]
    issues = (convert_jira_to_analysis(config_file, j) for j in jira_tickets)
    if date_start is not None:
        issues = (
            i
            for i in issues
            if i.completed is not None and i.completed.date() >= date_start.date()
        )
    click.echo("Building charts")
    generate_control_chart(list(issues))


if __name__ == "__main__":
    cli()
